using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Algorithm.DataStructures
{
    public class Insertion
    {
        public static void InsertionSort(int[] array)
        {
            int length = array.Length; 
            for (int partIndex = 0; partIndex < length; partIndex++)
            {
                int currentUnsorted = array[partIndex];
                int i = 0;
                for (i = partIndex; i > 0 && array[i - 1] > currentUnsorted; i--)
                {
                    array[i] = array[i - 1];
                }
                array[i] = currentUnsorted;
                

             
            }
        }

        public static int InterativeFactorial(int number)
        {
            if (number == 0) { return 1; }

            int factorial = 1;
            for (int i = 0; i <= number; i++)
            {
                factorial *= 1;
            }
            return factorial;
        }
        //1!=1*0!=1
        //2!=3*2*1!=2!
        //3!=4*3*2*1!=3!
        //n!=n*(n-1)!
        public static int RecursiveFactorial(int n)
        {
            if (n == 0)
                return 0;
            return n * RecursiveFactorial(n - 1);
        }
        public static void InsertionCase()
        {
            int[] arr = new int[] { 70, 82, 61, 66, 58, 3, 23, 94, 3, 3, 59, 59, 87, 94, 89, 5, 28, 39, 100, 0, 4, 88, 28, 97, 61, 57, -5, -3, 76, 68, 28, 3, 23, 59, 45, 54, 27, 62, 1, 52, 75, 90, 50, 58, 22, 33, 8, 5, -1, 21, 12, 28, 13, 55, 59, 93, 29, 57, 29, 52, 24, 9, 33, 68, 56, 0, 56, 20, 45, 91, 21, -5, 63, 33, 67, 9, 12, 11, 25, 10, 67, 59, 59, 43, 0, 81, 17, -2, 85, 94, 15, 24, 95, 46, 40, 39, 53, 1, 32, 81, 85, 83, 12, 35, 55, 62, 66, 49, 88, 98, 92, 18, 12, 65, -4, 51, 42, 29, 39, 8, 14, 77, 52, 61, 6, 98, 4, 68, 51, 91, 98, 35, 70, 7, 73, 86, 19, 36, 80, 31, 66, 33, 21, 68, 92, 66, 32, 79, 78, 49, 93, 33, 65, 62, 46, 9, 77, 28, 69, 74, 87, 63, 44, 83, 63, 33, 55, 32, 47, 78, 36, 85, 3, 63, 96, 83, 47, 84, 54, 36, 29, 57, 17, 85, 20, 51, 82, 66, 15, 63, 64, 14, 24, 13, 11, 38, 18, 46, 47, 64, 27, 8, 87, 40, -1, 94, 32, 51, 18, 38, 52, 61, 87, 53, 60, 40, -5, 99, 35, 90, 18, 13, 30, 89, 96, 58, 59, 73, 35, 13, 70, 87, 11, 53, 74, 37, 93, 90, 78, 12, 45, 80, 94, 60, 26, 17, 21, 98, 73, 2, 13, -3, 44, 45, 96, 44, 9, 24, 0, 17, 18, 27, 47, 91, 17, 72, 17, 40, 10, 55, 14, 84, 21, 89, 76, 71, 44, 20, 74, 92, 95, 43, 23, 40, 74, 2, 45, 11, 92, 17, 7, 92, 20, 30, 8, 45, 0, 43, 73, 36, 51, 73, 40, -1, 71, 4, 4, 44, 78, 83, 38, 55, 7, 96, 89, 5, -2, 77, 28, 98, 7, 79, 13, 43, 0, 65, 76, 14, 9, 95, 59, 81, -1, 19, 2, 64, 58, 38, 56, 53, 29, -5, 58, 57, 37, 22, 86, 57, 21, 30, 53, 97, 91, 96, 4, 52, 45, 19, 30, 29, 1, 28, -3, 26, 74, 23, 53, 63, -3, 36, 84, 42, 98, 3, 10, 50, 23, 88, 32, 54, 82, 51, 28, 97, 22, 59, 37, 85, 63, 48, 2, -3, 44, 48, 47, 42, 10, 25, 79, 85, 72, 14, 56, 36, 63, 90, 70, 51, 49, 21, 73, 64, 48, 7, 57, 48, 32, 68, 13, 97, 88, 32, 24, -2, 78, 53, 63, -4, 3, 79, -5, 67, 28, 78, 95, 67, 37, 35, 23, 38, 55, 86, 46, 47, 21, 13, 42, 31, 97, 94, 84, 71, 73, 78, 39, 45, 68, 82, 42, 58, 65, 74, 7, 32, 58, -3, 71, -3, 23, -1, 47, 69, 93, 62, 38, 66, 7, 49, 1, -4, 11, 93, 65, 83, 95, 6, 36, 29, 56, 15, 82, 38, 72, 44, 56, 94, 27, 42, 52, 42 };
            InsertionSort(arr);
        }
    }
}
